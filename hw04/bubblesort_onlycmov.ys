# Y86-64 program to perform bubblesort using no jumps and just one conditional move
# In this modified version, the swapping of `data[i]` and `data[i+1]` is achieved
# using three XOR operations, which effectively swaps the values in `%r13` and `%r14`.
# This eliminates the need for jumps in the swapping logic.

# Function: bubble_p
# Arguments:
#   %rdi: Pointer to the array
#   %rsi: Number of elements in the array
bubble_p:
    irmovq  $0, %r8              # Initialize outer loop counter

outer_loop:
    irmovq  $0, %r9              # Initialize inner loop counter
    irmovq  -8(%rsi), %r10       # Initialize last

inner_loop:
    addq    $1, %r9              # Increment inner loop counter
    cmpq    %r10, %r9            # Compare inner loop counter with last
    jg      done_inner_loop      # Exit inner loop if inner loop counter > last

    mrmovq  (%rdi,%r9,8), %r11   # Load data[i+1] into %r11
    mrmovq  (%rdi,%r9), %r12     # Load data[i] into %r12
    cmpq    %r11, %r12           # Compare data[i+1] with data[i]
    jge     next_iteration       # Skip swapping if data[i+1] >= data[i]

    xorq    %r13, %r13           # Clear %r13 (temporary register)
    xorq    %r14, %r14           # Clear %r14 (temporary register)

    # Swap data[i] and data[i+1]
    rrmovq  %r12, %r13           # Move data[i] to %r13
    rrmovq  %r11, %r14           # Move data[i+1] to %r14
    xorq    %r12, %r13           # XOR swap: %r13 = %r13 XOR %r12
    xorq    %r11, %r14           # XOR swap: %r14 = %r14 XOR %r11
    xorq    %r12, %r13           # XOR swap: %r13 = %r13 XOR %r12
    rmmovq  %r13, (%rdi,%r9,8)   # Store %r13 (data[i]) into data[i+1]
    rmmovq  %r14, (%rdi,%r9)     # Store %r14 (data[i+1]) into data[i]

next_iteration:
    jmp     inner_loop           # Jump to next iteration of inner loop

done_inner_loop:
    addq    $1, %r8              # Increment outer loop counter
    irmovq  $8, %r15             # Initialize constant 8
    subq    %r15, %rsi           # Decrement last by 1

    cmpq    $0, %r8              # Compare outer loop counter with 0
    jg      outer_loop           # Jump to next iteration of outer loop if counter > 0

    ret

# Test code
.pos    0
irmovq  $arr, %rdi               # Pass the array address as argument
irmovq  $5, %rsi                 # Pass the number of elements as argument
call    bubble_p                # Call bubble_p function

# Data
.pos    0x100
arr:
    .quad   5, 4, 3, 

2, 1
